CREATE OR REPLACE PROCEDURE ORDER_PROCESS_DB.ORDER_BASE.P_INVOICE_GENERATE()
RETURNS STRING
LANGUAGE SQL
AS
BEGIN
  -- Insert data into the table using parameters
        INSERT INTO ORDER_PROCESS_DB.ORDER_BASE.T_INVOICE (ORDER_ID, ORDER_DATE, INVOICE_DATE, TOTAL_AMOUNT,DISCOUNT,TAX_AMOUNT, FINAL_INVOICE_AMT, CUSTOMER_ID, CREATE_USER,CREATE_DATE)
        SELECT oh.ORDER_ID,
         oh.ORDER_DATE,
        CURRENT_DATE() as INVOICE_DATE,
        oh.TOTAL_AMOUNT,
        CASE
            WHEN p.CUSTOMER_CATEGORY = 'Gold' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Gold' and PROMOTION_TYPE = 'Discount') / 100) * oh.TOTAL_AMOUNT
            WHEN p.CUSTOMER_CATEGORY = 'Silver' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Silver' and PROMOTION_TYPE = 'Discount') / 100) * oh.TOTAL_AMOUNT
            WHEN p.CUSTOMER_CATEGORY = 'Bronze' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Bronze' and PROMOTION_TYPE = 'Discount') / 100) * oh.TOTAL_AMOUNT
            WHEN p.CUSTOMER_CATEGORY = 'Regular' AND oh.COUPON_CODE = 'Coupon_X' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where PROMOTION_TYPE = 'Coupon_X')) * oh.TOTAL_AMOUNT
            WHEN p.CUSTOMER_CATEGORY = 'Regular' AND oh.COUPON_CODE = 'Coupon_Y' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where PROMOTION_TYPE = 'Coupon_Y')) * oh.TOTAL_AMOUNT
            WHEN p.CUSTOMER_CATEGORY = 'Regular' AND oh.COUPON_CODE = 'Coupon_Z' THEN ((select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where PROMOTION_TYPE = 'Coupon_Z')) * oh.TOTAL_AMOUNT
            ELSE 0
        END AS DISC,
        (oh.TOTAL_AMOUNT - DISC) * 0.09 AS TAX_AMOUNT,
        ( oh.TOTAL_AMOUNT  -DISC + TAX_AMOUNT ) as FINAL_INVOICE_AMT,
        c.CUSTOMER_ID,
        oh.CREATE_USER,
        CURRENT_DATE() as CREATE_DATE
        FROM ORDER_PROCESS_DB.ORDER_XFRM.V_SALES_ORDER_HDR oh
        JOIN ORDER_PROCESS_DB.ORDER_XFRM.V_CUSTOMER c
        ON oh.CUSTOMER_ID = c.CUSTOMER_ID
        LEFT JOIN (select distinct CUSTOMER_CATEGORY
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION) p
        ON c.CATEGORY =  p.CUSTOMER_CATEGORY 
        WHERE oh.ORDER_DATE > CURRENT_DATE() AND c.STATUS = 'Active';


        //create invoice view
        CREATE OR REPLACE VIEW ORDER_PROCESS_DB.ORDER_ANALYSIS.V_INVOICE AS
        SELECT * FROM ORDER_PROCESS_DB.ORDER_BASE.T_INVOICE;

        //update customer table
        UPDATE ORDER_PROCESS_DB.ORDER_BASE.T_CUSTOMER AS cu
        set cu.LOYALTY_POINTS = cu.LOYALTY_POINTS +  FLOOR(cust.LOYALTY_POINTS  * ((select SUM(FINAL_INVOICE_AMT)
            from ORDER_PROCESS_DB.ORDER_BASE.T_INVOICE WHERE CUSTOMER_ID= cu.CUSTOMER_ID)/1000))
        FROM (SELECT c.CUSTOMER_ID,    
        SUM(CASE
            WHEN p.CUSTOMER_CATEGORY = 'Gold' THEN (select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Gold' and PROMOTION_TYPE = 'Loyalty') 
            WHEN p.CUSTOMER_CATEGORY = 'Silver' THEN (select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Silver' and PROMOTION_TYPE = 'Loyalty')
            WHEN p.CUSTOMER_CATEGORY = 'Bronze' THEN (select  PROMOTION_VALUE
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION where CUSTOMER_CATEGORY = 'Bronze' and PROMOTION_TYPE = 'Loyalty')
            
            ELSE 0
        END) AS LOYALTY_POINTS
,
      
        FROM ORDER_PROCESS_DB.ORDER_XFRM.V_SALES_ORDER_HDR oh
        JOIN ORDER_PROCESS_DB.ORDER_XFRM.V_CUSTOMER c
        ON oh.CUSTOMER_ID = c.CUSTOMER_ID
        LEFT JOIN (select distinct CUSTOMER_CATEGORY
            from ORDER_PROCESS_DB.ORDER_XFRM.V_PROMOTION) p
        ON c.CATEGORY =  p.CUSTOMER_CATEGORY 
        WHERE oh.ORDER_DATE > CURRENT_DATE() AND c.STATUS = 'Active' GROUP BY c.CUSTOMER_ID) AS cust  -- OR another table name
        WHERE cu.CUSTOMER_ID = cust.CUSTOMER_ID;

  -- Return a success message
  RETURN 'Data inserted successfully.';
END;

CALL ORDER_PROCESS_DB.ORDER_BASE.P_INVOICE_GENERATE();